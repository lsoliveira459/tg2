<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<!-- saved from url=(0035)http://opencores.org/project,plasma -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>Plasma - most MIPS I(TM) opcodes :: Overview :: OpenCores</title>
    <link rel="stylesheet" type="text/css" href="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/compiled.css">
    <link rel="icon" type="image/png" href="http://cdn.opencores.org/img/favicon.png">
    <link rel="shortcut icon" type="image/png" href="http://cdn.opencores.org/img/favicon.png">
    <link type="text/css" href="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/css" rel="stylesheet">
        
    <meta name="keywords" content="cores, VHDL, Verilog HDL, ASIC, Synthesizable, standard cell, IP, Intellectual Property, 32-bit RISC, UART, PCI, SDRAM, full custom, system on a chip, SOC, reusable, design, development, synthesis, designs, developers, C, Linux, eCos, open, free, open source cores, RTL code, system-on-a-chip, circuits, digital, GNU, GPL, core, controller, processor, system design, chip design, EDA, design methodology, design tools, ASICs, programmable logic, FPGA&#39;s, PLDs, CPLDs, verification, Synthesis, HDL, Simulation, IC design software, semiconductor design, integrated circuits, system designs, chip designs, EDAs,  design methodologies, design tool, ASIC, programmable logics, FPGA, PLD, CPLD, Synthesis,  circuit, Synopsys, system design, chip design, programmable logic, FPGA&#39;s, PLDs,  CPLDs, verification, Simulation
">
    <meta name="description" content="The Plasma CPU is a small synthesizable 32-bit RISC microprocessor.  It is currently running a live web server with an interrupt controller, UART, SRAM or DDR SDRAM controller, and Ethernet controller.  The Plasma CPU executes all MIPS I(TM) user mode instructions except unaligned load and store operations (see &quot;Avoiding Limitations&quot; below).  

This &quot;clean room&quot; CPU core is implemented in VHDL with either a two or three-stage pipeline.  It is running at 25 MHz on a Xilinx FPGA and also verified on an Altera FPGA.">    <script type="text/javascript" async="" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/ga.js"></script><script defer="defer" type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/jquery-1.6.2.min.js"></script>
    <script defer="defer" type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/compiled.js"></script>
    <script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/google_service.js"></script>
    <script type="text/javascript">
    GS_googleAddAdSenseService("ca-pub-0097483751598630");
    GS_googleEnableAllServices();
    </script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/google_ads.js"></script>
    <script type="text/javascript">
    GA_googleAddSlot("ca-pub-0097483751598630", "125x125");
    GA_googleAddSlot("ca-pub-0097483751598630", "240x60");
    GA_googleAddSlot("ca-pub-0097483751598630", "300x60");
    GA_googleAddSlot("ca-pub-0097483751598630", "468x60");
    GA_googleAddSlot("ca-pub-0097483751598630", "720x60");
    GA_googleAddSlot("ca-pub-0097483751598630", "728x90");
    </script>
    <script type="text/javascript">
    GA_googleFetchAds();
    </script>
    <!--[if IE 6]>
    <link rel="stylesheet" type="text/css" href="http://cdn.opencores.org/ie6.css" />
    <![endif]-->
    <!--[if (IE 7)|(IE 8)]>
    <link rel="stylesheet" type="text/css" href="http://cdn.opencores.org/ie78.css" />
    <![endif]-->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    
    <script type="text/javascript">
        
        var _gaq = _gaq || [];
        _gaq.push(['_setAccount', 'UA-2763846-2']);
        _gaq.push(['_trackPageview']);
        
        (function() {
            var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
        })();
        
    </script>
    
<script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/osd.js"></script><script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/saved_resource"></script><link type="text/css" href="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/inputtools.css" rel="stylesheet"><script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/inputtools.js"></script></head>
<body>
<div class="main">
    <div class="top">
        <a href="http://opencores.org/"><img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/OpenCores.png" alt="OpenCores" width="235" height="80"></a>
    </div>
    <div class="line">
	<div></div>
	<img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/corner.png" alt="" width="28" height="28">
    </div>
    <div class="mid" id="dm">
        <div class="mainmenu" id="dml">
	    
<div class="menu menu-login">
        <form action="http://opencores.org/login" method="post">
	Username:
	<input type="hidden" name="redirect" value="project,plasma">
	<input class="design ie6_input" name="user" type="text" data-cip-id="cIPJQ342845639" autocomplete="off">
	<br>
	Password:
	<br>
	<input class="design ie6_input" name="pass" type="password" data-cip-id="cIPJQ342845640">
	<br>
	<input class="design" name="remember" type="checkbox">Remember me
	<br>
	<input class="design" type="submit" value="Login">
    </form>
    <form action="http://opencores.org/register" method="post">
	<input class="design" type="submit" value="Register">
    </form>
    </div>

<div class="lang">
    <a href="http://opencores.org/lang,en" class="selected"><img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/gb.gif" alt="English" width="16" height="11"></a>
    <a href="http://opencores.org/lang,zh" class=""><img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/cn.gif" alt="Chineese" width="16" height="11"></a>
    <p> 部分翻译 </p>
</div>

<div class="menu">
    <h2> Browse </h2>
    <ul>
	<li><a href="http://opencores.org/projects">Projects</a></li>
	<li><a href="http://opencores.org/forum">Forums</a></li>
	<li><a href="http://opencores.org/about" onclick="return !toggle(this);">About</a>
	    <ul style="display: none;">
		<li><a href="http://opencores.org/opencores,mission">Mission</a></li>
		<li><a href="http://opencores.org/opencores,logos">Logos</a></li>
		<li><a href="http://opencores.org/opencores,contact">Contact us</a></li>
		<li><a href="http://opencores.org/opencores,advertise">Advertise</a></li>
	    </ul>
	</li>
	<li><a href="http://opencores.org/howto" onclick="return !toggle(this);">HowTo/FAQ</a>
	    <ul style="display: none;">
		<li><a href="http://opencores.org/opencores,faq">Site</a></li>
		<li><a href="http://opencores.org/opencores,faq_pe">Project</a></li>
		<li><a href="http://opencores.org/opencores,wishbone">Wishbone</a></li>
		<li><a href="http://opencores.org/opencores,svn">SVN</a></li>
		<li><a href="http://opencores.org/opencores,tools">EDA Tools</a></li>
	    </ul>
	</li>
	<li><a href="http://opencores.org/misc" onclick="return !toggle(this);">Misc</a>
	    <ul style="display: none;">
		<li><a href="http://opencores.org/news">News</a></li>
		<li><a href="http://opencores.org/articles">Articles</a></li>
		<li><a href="http://opencores.org/numbers">Statistics</a></li>
		<li><a href="http://opencores.org/newsletters">Newsletters</a></li>
		<li><a href="http://opencores.org/jobs">Available jobs</a></li>
		<li><a href="http://opencores.tradepub.com/">Magazines</a></li>
	    </ul>
	</li>
	<li><a href="http://opencores.org/partners" onclick="return !toggle(this);">Partners</a>
	    <ul style="display: none;">
		<li><a href="http://opencores.org/partners,plunify">Plunify</a></li>
	    </ul>
	</li>
	<li><a href="http://opencores.org/shop,items">Shop</a></li>
    </ul>
</div>


<div class="pad_leftside" style="border:0px">
    <!-- 125x125 -->
    <script type="text/javascript">
    GA_googleFillSlot("125x125");
    </script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/ads"></script><div id="google_ads_div_125x125_ad_wrapper">
<div id="google_ads_div_125x125_ad_container" style="display:inline-block;">
<ins style="width: 125px; height: 125px; display: inline-table; position: relative; border: 0px;"><ins style="width: 125px; height: 125px; display: block; position: relative; border: 0px;"><iframe id="google_ads_iframe_125x125" name="google_ads_iframe_125x125" width="125" height="125" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; position: absolute; top: 0px; left: 0px;"></iframe></ins></ins></div>
</div>
<script>GA_googleCreateDomIframe("google_ads_div_125x125_ad_container" ,"125x125");</script>
</div>

<div class="menu menu-tools">
    <h2> Tools </h2>
    <form action="http://www.google.com/cse" id="cse-search-box">
	<div>
	    <input type="hidden" name="cx" value="012935124227736198121:b6s3cwd8ada">
	    <input type="hidden" name="ie" value="UTF-8">
	    <input type="text" name="q" size="12" style="border: 1px solid rgb(126, 157, 185); padding: 2px; background-image: url(http://www.google.com/cse/intl/en/images/google_custom_search_watermark.gif); background-color: rgb(255, 255, 255); background-position: 0% 50%; background-repeat: no-repeat no-repeat;" data-cip-id="cIPJQ342845641">
	    <input type="submit" name="sa" value="Search">
	</div>
    <input name="siteurl" type="hidden" value="opencores.org/project,plasma"><input name="ref" type="hidden" value="stackoverflow.com/questions/8162273/developing-a-mips-processor-using-vhdl-any-good-tutorials"><input name="ss" type="hidden" value=""></form>
</div>
        </div>
        <div class="content" id="dmc">
	    
<div class="banner" style="padding: 6px 0px; width: 1020px; overflow: visible;">
    
    <div style="float: left; width: 720px; height: 60px;">
        <!-- 720x60 -->
        <script type="text/javascript">
        GA_googleFillSlot("720x60");
        </script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/ads(1)"></script><div id="google_ads_div_720x60_ad_wrapper">
<div id="google_ads_div_720x60_ad_container" style="display:inline-block;">
<ins style="width: 550px; height: 60px; display: inline-table; position: relative; border: 0px;"><ins style="width: 550px; height: 60px; display: block; position: relative; border: 0px;"><iframe id="google_ads_iframe_720x60" name="google_ads_iframe_720x60" width="550" height="60" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; position: absolute; top: 0px; left: 0px;"></iframe></ins></ins></div>
</div>
<script>GA_googleCreateDomIframe("google_ads_div_720x60_ad_container" ,"720x60");</script>
    </div>
        <div style="float: left; width: 300px; height: 60px;">
        <!-- 300x60 -->
        <script type="text/javascript">
        GA_googleFillSlot("300x60");
        </script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/ads(2)"></script><div id="google_ads_div_300x60_ad_wrapper">
<div id="google_ads_div_300x60_ad_container" style="display:inline-block;">
<ins style="width: 234px; height: 60px; display: inline-table; position: relative; border: 0px;"><ins style="width: 234px; height: 60px; display: block; position: relative; border: 0px;"><iframe id="google_ads_iframe_300x60" name="google_ads_iframe_300x60" width="234" height="60" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; position: absolute; top: 0px; left: 0px;"></iframe></ins></ins></div>
</div>
<script>GA_googleCreateDomIframe("google_ads_div_300x60_ad_container" ,"300x60");</script>
    </div>
    
</div>
	                <h1 style="overflow: auto;"><img alt="*" title="OpenCores Certified" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/star.png">Plasma - most MIPS I(TM) opcodes :: Overview
<div class="ptabs">
    
            <div class="current">
            <a href="http://opencores.org/project,plasma,overview">Overview</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,opcodes">Opcodes</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,tools">Tools</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,gnu%20gcc">Gnu gcc</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,downloads">Downloads</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,news">News</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,bugtracker">Bugtracker</a>
    </div>
            <div>
            <a href="http://opencores.org/project,plasma,implementation%20stats">Implementation stats</a>
    </div>
        
</div></h1>
<div style="float: right;" class="maintainers">
    
    <h2>Project maintainers</h2>
    
    <ul>
        
                
        <li>
            <a href="http://opencores.org/acc,view,rhoads">
                Rhoads, Steve
            </a>
                    </li>
        
                
                
    </ul>
    
</div>

<h2>Details</h2>

<p>
    Name: plasma<br>
    Created: Sep 25, 2001<br>
    Updated: Jul 12, 2013<br>
        SVN Updated: Jul 21, 2013<br>
    SVN: <a href="http://opencores.org/websvn,listing,plasma">Browse</a><br>
    Latest version: <a href="http://opencores.org/download,plasma">download</a><br>
    Statistics: <a href="http://opencores.org/stats,plasma">View</a>
        
</p>

<h2>
    Other project properties
    </h2>

<p>
    Category: <a href="http://opencores.org/projects?cat=Processor">Processor</a><br>
    Language: <a href="http://opencores.org/projects?lang=VHDL">VHDL</a><br>
    Development status: <a href="http://opencores.org/projects?stage=stable">Stable</a><br>
    Additional info:
        <a href="http://opencores.org/projects?design_done=on">Design done</a>,        <a href="http://opencores.org/projects?fpga_proven=on">FPGA proven</a>        <br>
    WishBone Compliant: No<br>
    License: Others
</p>    <div id="d_Description">
        <h2>
            <a name="description"></a>
            Description
                    </h2>
        
                
        <p id="p_Description">
            The Plasma CPU is a small synthesizable 32-bit RISC microprocessor.  It is currently running a live web server with an interrupt controller, UART, SRAM or DDR SDRAM controller, and Ethernet controller.  The Plasma CPU executes all MIPS I(TM) user mode instructions except unaligned load and store operations (see "Avoiding Limitations" below).  
<br>
<br>This "clean room" CPU core is implemented in VHDL with either a two or three-stage pipeline.  It is running at 25 MHz on a Xilinx FPGA and also verified on an Altera FPGA.
        </p>
        
    </div>
    <div id="d_Success Stories">
        <h2>
            <a name="success_stories"></a>
            Success Stories
                    </h2>
        
                
        <p id="p_Success Stories">
            The Plasma CPU along with the Plasma RTOS and TCP/IP protocol stack are now running a live <a href="http://plasmacpu.no-ip.org:8080/">Web Server</a> on a Xilinx FPGA.<br>
<a href="http://plasmacpu.no-ip.org:8080/">
<img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/usercontent,img,1238032303" alt="Plasma_web"></a>
&nbsp;&nbsp;<a href="http://plasmacpu.no-ip.org:8080/"><img width="160" height="150" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/usercontent,img,1238869310" alt="spartan_3e"></a>
&nbsp;&nbsp;<a href="http://plasmacpu.no-ip.org:8080/"><img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/usercontent,img,1238032507" alt="Board_image"></a>

        </p>
        
    </div>
    <div id="d_Block diagram">
        <h2>
            <a name="block_diagram"></a>
            Block diagram
                    </h2>
        
                
        <p id="p_Block diagram">
            <img src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/usercontent,img,1238001458" alt="CPU_diagram">
        </p>
        
    </div>
    <div id="d_IMAGE: cpu.gif">
        <h2>
            <a name="image:_cpu.gif"></a>
            IMAGE: cpu.gif
                    </h2>
        
                
        <p id="p_IMAGE: cpu.gif">
            FILE: cpu.gif
<br>DESCRIPTION: 
<br>
        </p>
        
    </div>
    <div id="d_Example Instruction">
        <h2>
            <a name="example_instruction"></a>
            Example Instruction
                    </h2>
        
                
        <p id="p_Example Instruction">
            The CPU is implemented with a two or three stage pipeline with an additional optional stage for memory read and writes.  (Using the three stage pipeline enables "pipeline.vhd" which delays some control signals into the next stage.)

An ADD instruction would take the following steps:
<br><br>Stage #0:
</p><ul>
   1.  The "pc_next" entity passes the program counter (PC) to the "mem_ctrl" entity which fetches the opcode from memory.
</ul>
Stage #1:
<ul>
   2.  The memory returns the opcode.
</ul>
Stage #2:
<ul>
   3.  "Mem_ctrl" passes the opcode to the "control" entity.
<br>   4.  "Control" converts the 32-bit opcode to a 60-bit VLWI opcode and sends control signals to the other entities.
<br>   5.  Based on the rs_index and rt_index control signals, "reg_bank" sends the 32-bit reg_source and reg_target to "bus_mux".
</ul>
Stage #3 (part of stage #2 if using two stage pipeline):
<ul>
   6.  Based on the a_source and b_source control signals, "bus_mux" multiplexes reg_source onto a_bus and reg_target onto b_bus.
<br>   7.  Based on the alu_func control signals, "alu" adds the values from a_bus and b_bus and places the result on c_bus.
<br>   8.  Based on the c_source control signals, "bus_mux" multiplexes c_bus onto reg_dest.
<br>   9.  Based on the rd_index control signal, "reg_bank" saves reg_dest into the correct register.
</ul>
Stage #4 (part of stage #3 if using two stage pipeline):
<ul>
   10.  Read or write memory if needed.
</ul>
        <p></p>
        
    </div>
    <div id="d_Plasma Version 3 Features">
        <h2>
            <a name="plasma_version_3_features"></a>
            Plasma Version 3 Features
                    </h2>
        
                
        <p id="p_Plasma Version 3 Features">
            The Plasma Version 3 core now contains a bidirectional serial port, interrupt controller, and hardware timer.  Version 3.5 added a DDR SDRAM controller, Ethernet MAC, and Flash interface.  There is C and assembly code for the Plasma Real-Time Operating System -- a fully preemptive <b>RTOS</b> supporting threads, semaphores, mutexes, message queues, timers, heaps, an interrupt manager, ANSI C library, single precision floating point library, TCP/IP protocol stack, and Web server.
        </p>
        
    </div>
    <div id="d_List of Files">
        <h2>
            <a name="list_of_files"></a>
            List of Files
                    </h2>
        
                
        <p id="p_List of Files">
            </p><ul>
<table border="1" cellspacing="0">
<tbody><tr>
 <td><u>FILE</u></td>
 <td><u>PURPOSE (Directory: vhdl)</u></td>
</tr>
<tr>
 <td>code.txt</td>
 <td>Input opcodes for the test bench -- test.axf "converted"</td>
</tr>
<tr>
 <td>mlite_pack.vhd</td>
 <td>Constants and Functions Package</td>
</tr>
<tr>
 <td>tbench.vhd</td>
 <td>Test Bench that uses plasma.vhd</td>
</tr>
<tr>
 <td>plasma_if.vhd</td>
 <td>Top level interface to Xilinx or Altera FPGA</td>
</tr>
<tr>
 <td>plasma_3e.vhd</td>
 <td>Top level interface to Xilinx Spartan-3E with DDR</td>
</tr>
<tr>
 <td>-ddr_ctrl.vhd</td>
 <td>DDR controller</td>
</tr>
<tr>
 <td>-plasma.vhd</td>
 <td>CPU core with RAM and UART</td>
</tr>
<tr>
 <td>--cache.vhd</td>
 <td>Optional 4KB cache</td>
</tr>
<tr>
 <td>--ram.vhd</td>
 <td>Internal RAM for Altera FPGA</td>
</tr>
<tr>
 <td>--ram_xilinx.vhd</td>
 <td>Internal RAM for Xilinx FPGA</td>
</tr>
<tr>
 <td>--uart.vhd</td>
 <td>UART (can pause CPU if needed)</td>
</tr>
<tr>
 <td>--eth_dma.vhd</td>
 <td>Ethernet MAC with DMA</td>
</tr>
<tr>
 <td>--mlite_cpu.vhd</td>
 <td>Top Level VHDL for CPU core</td>
</tr>
<tr>
 <td>---alu.vhd</td>
 <td>Arithmetic Logic Unit</td>
</tr>
<tr>
 <td>---bus_mux.vhd</td>
 <td>BUS Multiplex Unit</td>
</tr>
<tr>
 <td>---control.vhd</td>
 <td>Opcode Decoder</td>
</tr>
<tr>
 <td>---mem_ctrl.vhd</td>
 <td>Memory Controller</td>
</tr>
<tr>
 <td>---mult.vhd</td>
 <td>Multiplication and Division Unit</td>
</tr>
<tr>
 <td>---pc_next.vhd</td>
 <td>Program Counter Unit</td>
</tr>
<tr>
 <td>---reg_bank.vhd</td>
 <td>Register Bank for 32, 32-bit Registers</td>
</tr>
<tr>
 <td>---shifter.vhd</td>
 <td>Shifter Unit</td>
</tr>
</tbody></table>

<table border="1" cellspacing="0">
<tbody><tr>
 <td><u>FILE</u></td>
 <td><u>PURPOSE (Directory: tools)</u></td>
</tr>
<tr>
 <td>makefile</td>
 <td>Makefile for the PC for creating "code.txt"</td>
</tr>
<tr>
 <td>plasma.h</td>
 <td>Plasma header file for register addresses</td>
</tr>
<tr>
 <td>boot.asm</td>
 <td>Initializes $gp and $sp, clears .bss</td>
</tr>
<tr>
 <td>opcodes.asm</td>
 <td>Tests all the MIPS I(tm) opcodes</td>
</tr>
<tr>
 <td>convert.c</td>
 <td>Converts test.axf to code.txt</td>
</tr>
<tr>
 <td>ram_image.c</td>
 <td>Creates Xilinx RAM file ram_image.vhd from ram_xilinx.vhd and code.txt</td>
</tr>
<tr>
 <td>bootldr.c</td>
 <td>Serial port boot loader that can download another program</td>
</tr>
<tr>
</tr><tr>
 <td>etermip.c</td>
 <td>Terminal program to download code and transfer Ethernet packets</td>
</tr>
 <tr><td>mlite.c</td>
 <td>Simulates the CPU in software</td>
</tr>
<tr>
 <td>bintohex.c</td>
 <td>Converts test.exe to code[0-3].hex for lpm_ram for Altera FPGA</td>
</tr>
<tr>
 <td>test.c</td>
 <td>Test program (opcodes) for the CPU core</td>
</tr>
<tr>
 <td>pi.c</td>
 <td>Calculates the first 16 digits of PI</td>
</tr>
<tr>
 <td>count.c</td>
 <td>Test program that counts using words</td>
</tr>
<tr>
 <td>ddr_init.c</td>
 <td>Initialize the DDR chip</td>
</tr>
<tr>
 <td>cpu.gif</td>
 <td>Block Diagram</td>
</tr>
</tbody></table>

<table border="1" cellspacing="0">
<tbody><tr>
 <td><u>FILE</u></td>
 <td><u>PURPOSE (Directory: kernel)</u></td>
</tr>
<tr>
 <td>makefile</td>
 <td>Makefile for Plasma RTOS</td>
</tr>
<tr>
 <td>rtos.h</td>
 <td>Header file for Plasma RTOS</td>
</tr>
<tr>
 <td>rtos.c</td>
 <td>Plasma pre-emptive Real-Time Operating System</td>
</tr>
<tr>
 <td>libc.c</td>
 <td>ANSI C library subset</td>
</tr>
<tr>
 <td>math.c</td>
 <td>Single precision floating point library</td>
</tr>
<tr>
 <td>uart.c</td>
 <td>Serial port driver</td>
</tr>
<tr>
 <td>rtos_test.c</td>
 <td>Test the RTOS functions</td>
</tr>
<tr>
 <td>tcpip.h</td>
 <td>TCP/IP header file</td>
</tr>
<tr>
 <td>tcpip.c</td>
 <td>TCP/IP protocol stack</td>
</tr>
<tr>
 <td>ethernet.c</td>
 <td>Ethernet MAC</td>
</tr>
<tr>
 <td>http.c</td>
 <td>Web server</td>
</tr>
<tr>
 <td>filesys.c</td>
 <td>File system</td>
</tr>
<tr>
  <td>flash.c</td>
  <td>Flash access</td>
</tr>
<tr>
 <td>netutil.c</td>
 <td>FTP server/client and telnet server</td>
</tr>
</tbody></table>
</ul>
        <p></p>
        
    </div>
    <div id="d_Downloads">
        <h2>
            <a name="downloads"></a>
            Downloads
                    </h2>
        
                
        <p id="p_Downloads">
            <a name="downloads_link"></a>The Opencores Subversion web page can create the 130KB <a href="http://www.opencores.org/download,plasma">plasma_latest.tar.gz</a> file containing all the latest code.
        </p>
        
    </div>
    <div id="d_Tools">
        <h2>
            <a name="tools"></a>
            Tools
                    </h2>
        
                
        <p id="p_Tools">
            <a name="tools_link"></a>The MIPS(tm) GCC ELF compiler for Windows is available <a href="http://opencores.org/usercontent,doc,1238033264" title="gccmips">gccmips_elf.zip</a> (2.4MB).  The OpenCores server wouldn't let me save zip files so I had to rename it with an '.odt' extention.  Rename the file from gccmips_elf.odt to gccmips_elf.zip before unzipping the files into the trunk\gccmips_elf directory.  Add this directory to your executable PATH environment:  set path=%PATH%;YOUR_DIR\trunk\gccmips_elf
<br><br>If you use Windows and don't have a Microsoft C compiler for Windows, you will need pre-compiled versions of the <a href="http://opencores.org/usercontent,doc,1238460426" title="tools_zip.odt">tools</a> (rename as tools.zip) which should be placed in the tools directory.  
<br><br>You may also need a Windows version of <a href="http://opencores.org/usercontent,doc,1338069068">gmake</a>.  Rename the file gmake_zip.odt to gmake.zip before unzipping.
        </p>
        
    </div>
    <div id="d_Supporting Documentation">
        <h2>
            <a name="supporting_documentation"></a>
            Supporting Documentation
                    </h2>
        
                
        <p id="p_Supporting Documentation">
            See the tabs at the top for additional build instructions:
</p><ul>
<li>The Plasma CPU instruction set</li>
<li>Building the tools</li>
<li>Additional Linux GNU MIPS tools</li>
<li>Building the Plasma RTOS</li>
<li>Building the Plasma TCP/IP stack</li>
</ul>

The implementation is based on information found in: 
<ul>
<li>"MIPS RISC Architecture" by Gerry Kane and Joe Heinrich</li>
<li>"The Designer's Guide to VHDL" by Peter J. Ashenden</li>
</ul>

The MIPS I(TM) instruction set can be found by:
<ul>
<li>Go to the MIPS Technologies, Inc. Web site http://www.mips.com/.</li>
<li>Under the Products menu, click on Resource Library.</li>
<li>Click on Product Materials in the submenu on the left.</li>
<li>Click on MIPS Architecture from the next menu on the left.</li>
<li>Finally, click on the link for "MIPS32® Architecture for Programmers Volume II: The MIPS32® Instruction Set (.pdf)".</li>
</ul>

        <p></p>
        
    </div>
    <div id="d_Big/Little Endian">
        <h2>
            <a name="big/little_endian"></a>
            Big/Little Endian
                    </h2>
        
                
        <p id="p_Big/Little Endian">
            The CPU core operates in Big Endian mode by default. To operate in Little Endian mode, change "little_endian" from "00" to "11" in the file mem_ctrl.vhd. 
        </p>
        
    </div>
    <div id="d_Bus Interface">
        <h2>
            <a name="bus_interface"></a>
            Bus Interface
                    </h2>
        
                
        <p id="p_Bus Interface">
            All signals are active high.  Here are the signals for writing a character to address 0xffff when using a two stage pipeline:
</p><pre><br>   entity mlite_cpu is<br>      port(clk          : in std_logic;<br>        reset_in     : in std_logic;<br>        intr_in      : in std_logic;<br><br>        address_next : out std_logic_vector(31 downto 2); --for synch ram<br>        byte_we_next : out std_logic_vector(3 downto 0);<br><br>        address      : out std_logic_vector(31 downto 2);<br>        byte_we      : out std_logic_vector(3 downto 0);<br>        data_w       : out std_logic_vector(31 downto 0);<br>        data_r       : in std_logic_vector(31 downto 0);<br>        mem_pause    : in std_logic);<br>   end; --entity mlite_cpu
<br>  Program:<br>  addr     value  opcode <br>  =============================<br>    3c: 00000000  nop<br>    40: 34040041  li $a0,0x41<br>    44: 3405ffff  li $a1,0xffff<br>    48: a0a40000  sb $a0,0($a1)<br>    4c: 00000000  nop<br>    50: 00000000  nop<br>
      intr_in                             mem_pause<br>  reset_in                               byte_we     Stages<br>     ns         address     data_w     data_r        40 44 48 4c 50<br>   3600  0  0  00000040   00000000   34040041  0  0   1  <br>   3700  0  0  00000044   00000000   3405FFFF  0  0   2  1  <br>   3800  0  0  00000048   00000000   A0A40000  0  0      2  1  <br>   3900  0  0  0000004C   41414141   00000000  0  0         2  1<br>   4000  0  0  0000FFFC   41414141   XXXXXX41  1  0         3  2  <br>   4100  0  0  00000050   00000000   00000000  0  0               1<br></pre>
        <p></p>
        
    </div>
    <div id="d_Synthesis">
        <h2>
            <a name="synthesis"></a>
            Synthesis
                    </h2>
        
                
        <p id="p_Synthesis">
            The CPU core was synthesized for several different FPGAs:
</p><ul><li>Xilinx Spartan-3E Starter Kit Board with a XC3S500 used 2021 of 4656 slices (43 percent).  Image includes DDR and Ethernet controllers.</li>
<li>Removing the multiplication unit reduces the size by 558 slices.</li>
<li><a href="http://www.xilinx.com/xlnx/xebiz/designResources/ip_product_details.jsp?key=HW-SPAR3-SK-UNI-G">Xilinx Spartan-3 Starter Kit Board</a> with an Xilinx XC3S200 Spartan-3 FPGA.</li>
<li>Altera EP20K200EFC484-2X FPGA.</li></ul>
        <p></p>
        
    </div>
    <div id="d_Status">
        <h2>
            <a name="status"></a>
            Status
                    </h2>
        
                
        <p id="p_Status">
            </p><ul>
<li>All MIPS I(TM) instructions are implemented and tested (except the unsupported previously patented unaligned load and store opcodes).</li>
<li>Currently running on an Altera EP20K200EFC484-2X FPGA and a Xilinx XC3S500 and XC3S200 FPGA.</li>
<li>Also running on a Xilinx Spartan-3E starter kit with DDR SDRAM, Ethernet MAC, and Flash Controller.</li>
<li>Running at 50 MHz on newer Xilinx FPGAs with three stage pipeline.</li>
<li>See "opcodes.asm" for regression test.</li>
<li>Supports Interrupts.</li>
<li>Includes several C test programs:  Calculating PI; Prime Numbers; Showing Numbers Using Words; the <b>Plasma RTOS</b>; and single precision floating point library.</li>
</ul>

        <p></p>
        
    </div>
    <div id="d_Disclaimer">
        <h2>
            <a name="disclaimer"></a>
            Disclaimer
                    </h2>
        
                
        <p id="p_Disclaimer">
            MIPS(R) is a registered trademark and MIPS I(TM) is a trademark of MIPS Technologies, Inc. in the United States and other countries.  MIPS Technologies, Inc. does not endorse and is not associated with this project.  OpenCores and Steve Rhoads are not affiliated in any way with MIPS Technologies, Inc.
        </p>
        
    </div>
    <div id="d_Legal Notice">
        <h2>
            <a name="legal_notice"></a>
            Legal Notice
                    </h2>
        
                
        <p id="p_Legal Notice">
            The Plasma CPU project has been placed into the public domain by its original author and is free for commercial and non-commercial use.  
<br>
<br>This software is provided "as is" and any express or implied warranties, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose are disclaimed.
        </p>
        
    </div>
    <div id="d_Avoiding Limitations">
        <h2>
            <a name="avoiding_limitations"></a>
            Avoiding Limitations
                    </h2>
        
                
        <p id="p_Avoiding Limitations">
            This section describes how to avoid the two main limitations of the Plasma CPU core.  The first limitation is that unaligned load and store operations are not supported since they were patented.  This means that when loading or storing 32-bit values the memory address must be on a 32-bit aligned address.  [The <a href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO1&Sect2=HITOFF&d=PALL&p=1&u=%2Fnetahtml%2FPTO%2Fsrchnum.htm&r=1&f=G&l=50&s1=4,814,976.PN.&OS=PN/4,814,976&RS=PN/4,814,976">patent</a> for the unaligned memory access instructions expired Dec 23, 2006.]

<br><br>Most RISC CPUs have limited support for unaligned memory accesses.  The GCC MIPS compiler does not normally generate unaligned memory accesses.  Try compiling a C program and then look in the listing file if any of these MIPS instructions are used:  LWL, LWR, SWL, or SWR.  If needed, there is a GCC patch to never generate unaligned memory accesses at <a href="http://ultra-embedded.com/fpga_audio">ultra-embedded</a>-&gt;GCC Modifications.

<br><br>The second main limitation of the Plasma CPU is that exceptions (BREAK and SYSCALL opcodes) must not be placed immediately after a branch instruction (in the branch delay slot).  The main uses for exceptions are software interrupts for debugger support and calling operating system calls.  
        </p>
        
    </div>
    <div id="d_Plasma CPU Web Articles">
        <h2>
            <a name="plasma_cpu_web_articles"></a>
            Plasma CPU Web Articles
                    </h2>
        
                
        <p id="p_Plasma CPU Web Articles">
            Several groups have published how they have used the Plasma CPU.
</p><ul>
<li>Book: <a href="http://books.google.com/books?id=U5mGsR1WA-gC">System-level Test and Validation of Hardware/software Systems</a></li>
<li>IEEE: <a href="http://portal.acm.org/citation.cfm?id=1022809&dl=ACM&coll=portal">Low-Cost Software-Based Self-Testing of RISC Processor Cores</a></li>
<li>IEEE: <a href="http://doi.ieeecomputersociety.org/10.1109/IPDPS.2007.370380">A Cryptographic Coarse Grain Reconfigurable Architecture Robust Against DPA</a></li>
<li>IEEE: <a href="http://doi.ieeecomputersociety.org/10.1109/TEST.2003.1270868">Application and Analysis of RT-Level Software-Based Self-Testing for Embedded Processor Cores</a></li>
<li>IEEE: <a href="http://doi.ieeecomputersociety.org/10.1109/TC.2005.68">Software-Based Self-Testing of Embedded Processors</a></li>
<li>IEEE: <a href="http://portal.acm.org/citation.cfm?id=968878.968956&coll=&dl=&type=series&idx=SERIES428%E2%88%82=series&WantType=Proceedings&title=DATE">Effective Software-Based Self-Test Strategies for On-Line Periodic Testing of Embedded Processors</a></li>
<li>IEEE: <a href="http://www.computer.org/portal/web/csdl/doi/10.1109/ReConFig.2009.26">Floating Point Hardware for Embedded Processors in FPGAs</a></li>
<li>Research: <a href="http://portal.acm.org/citation.cfm?id=968280.968293&coll=&dl=&type=series&idx=SERIES100%E2%88%82=series&WantType=Proceedings&title=FPGA">Making visible the thermal behaviour of embedded microprocessors on FPGAs: a progress report</a></li>
<li><a href="http://www.inf.pucrs.br/~moraes/my_pubs/papers/2011/2011_date_carara.pdf">
Achieving Composability in NoC-Based MPSoCs 
Through QoS Management at Software Level
</a></li>
<li><a href="http://www.inf.pucrs.br/~moraes/my_pubs/papers/2011/2011_iscas_gabriel.pdf">
Predictive Dynamic Frequency Scaling for
Multi-Processor Systems-on-Chip
</a></li>
<li><a href="http://www.computer.org/portal/web/csdl/doi/10.1109/ReConFig.2010.17">
Providing Better Multi-Processor Systems-on-Chip Resources Utilization by Means
of Using a Control-Loop Feedback Mechanism
</a></li>
<li><a href="http://paperc.de/7371-proceedings-of-the-5th-international-workshop-on-reconfigurable-communication-centric-systems-on-chip-2010-recosoc10-9783866445154/pages/13">
A Self-adaptive communication protocol allowing
fine tuning between flexibility and performance in
Homogeneous MPSoC systems
</a></li>
<li><a href="http://portal.acm.org/citation.cfm?id=1854174&dl=ACM&coll=DL&CFID=8903348&CFTOKEN=70195911">
Evaluating the Impact of Task Migration in Multi-Processor
Systems-on-Chip
</a></li>
<li><a href="http://www.lirmm.fr/~marchesan/public_files/papers/2010/gdr/RemiBUSSEUIL-GabrielMARCHESANALMEIDA.pdf">
Exploration of task migration techniques for
distributed memory MultiProcessor Systems on Chips
</a></li>
<li>Thesis: <a href="http://etd.gatech.edu/theses/available/etd-08242007-111625/unrestricted/srinivasan_sudarshan_k_200712_phd.pdf">Efficient Verification of Bit-Level Pipelined Machines Using Refinement</a></li>
<li>Portuguese: <a href="http://www.inf.ufrgs.br/~flavio/ensino/cmp237/vitor_apresentacao.pdf">Harvard Architecture?</a></li>
<li>Portuguese: <a href="http://www.inf.ufrgs.br/~flavio/ensino/cmp237/vitor_relatorio.pdf">Report of the Draft Amendment of the Organization of Interface</a></li>
<li>Usage: <a href="http://whoyouvotefor.info/spartan_plasma_lcd.html">Plasma soft processor on the Spartan board</a></li>
<li>Verilog: <a href="http://www.sugawara-systems.com/open_sources.htm">Veritak VHDL to Verilog Translator</a></li>
<li>Verilog: <a href="http://translate.google.com/translate?u=http%3A%2F%2Fwww.fpga-fancier.com%2FphpBB2%2Fviewtopic.php%3Ft%3D30&sl=zh-CN&tl=en&hl=en&ie=UTF-8">YF32 - A simple 32-bit CPU SOC Platform</a> [<a href="http://www.fpga-fancier.com/phpBB2/viewtopic.php?t=30">original Chinese</a>]</li>
</ul>

        <p></p>
        
    </div>

        </div>
	<div style="clear:both;margin-left:200px;">
            <!-- 728x90 -->
            <script type="text/javascript">
            GA_googleFillSlot("728x90");
            </script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/ads(3)"></script><div id="google_ads_div_728x90_ad_wrapper">
<div id="google_ads_div_728x90_ad_container" style="display:inline-block;">
<ins style="width: 728px; height: 90px; display: inline-table; position: relative; border: 0px;"><ins style="width: 728px; height: 90px; display: block; position: relative; border: 0px;"><iframe id="google_ads_iframe_728x90" name="google_ads_iframe_728x90" width="728" height="90" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; position: absolute; top: 0px; left: 0px;"></iframe></ins></ins></div>
</div>
<script>GA_googleCreateDomIframe("google_ads_div_728x90_ad_container" ,"728x90");</script>
	</div>
    </div>
    <div class="bot">
	© copyright 1999-2013
OpenCores.org, equivalent to ORSoC AB, all rights reserved. OpenCores®, registered trademark.
    </div>
</div>

<!-- Google search -->
<script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/jsapi"></script>
<script type="text/javascript">google.load("elements", "1", {packages: "transliteration"});</script><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/saved_resource(1)" type="text/javascript"></script><link href="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/transliteration.css" type="text/css" rel="stylesheet"><script src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/transliteration.I.js" type="text/javascript"></script>
<script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/t13n"></script>
<script type="text/javascript" src="./Plasma - most MIPS I(TM) opcodes    Overview    OpenCores_files/brand"></script>
<!-- /Google search -->


<div class="cip-genpw-icon cip-icon-key-small" style="z-index: 2; top: 163px; left: 124.5px;"></div><div class="cip-ui-dialog cip-ui-widget cip-ui-widget-content cip-ui-corner-all cip-ui-front cip-ui-draggable" tabindex="-1" role="dialog" aria-describedby="cip-genpw-dialog" style="display: none;" aria-labelledby="cip-ui-id-1"><div class="cip-ui-dialog-titlebar cip-ui-widget-header cip-ui-corner-all cip-ui-helper-clearfix"><span id="cip-ui-id-1" class="cip-ui-dialog-title">Password Generator</span><button class="cip-ui-button cip-ui-widget cip-ui-state-default cip-ui-corner-all cip-ui-button-icon-only cip-ui-dialog-titlebar-close" role="button" aria-disabled="false" title="×"><span class="cip-ui-button-icon-primary cip-ui-icon cip-ui-icon-closethick"></span><span class="cip-ui-button-text">×</span></button></div><div id="cip-genpw-dialog" style="" class="cip-ui-dialog-content cip-ui-widget-content"><div class="cip-genpw-clearfix"><button id="cip-genpw-btn-generate" class="b2c-btn b2c-btn-primary b2c-btn-small" style="float: left;">Generate</button><button id="cip-genpw-btn-clipboard" class="b2c-btn b2c-btn-small" style="float: right;">Copy to clipboard</button></div><div class="b2c-input-append cip-genpw-password-frame"><input id="cip-genpw-textfield-password" type="text" class="cip-genpw-textfield"><span class="b2c-add-on" id="cip-genpw-quality">123 Bits</span></div><label class="cip-genpw-label"><input id="cip-genpw-checkbox-next-field" type="checkbox" class="cip-genpw-checkbox"> also fill in the next password-field</label><button id="cip-genpw-btn-fillin" class="b2c-btn b2c-btn-small">Fill in &amp; copy to clipboard</button></div></div></body></html>